find_package(PkgConfig QUIET)
pkg_check_modules(PC_FFTW QUIET fftw)

find_path(FFTW_INCLUDE_DIR
  NAMES fftw3.h
  PATHS ${PC_FFTW_INCLUDE_DIRS})
find_library(FFTW_LIBRARY
  NAMES fftw3
  PATHS ${PC_FFTW_LIBRARY_DIRS})
find_library(FFTWF_LIBRARY
  NAMES fftw3f
  PATHS ${PC_FFTW_LIBRARY_DIRS})
find_library(FFTW_THREADS_LIBRARY
  NAMES fftw3_threads
  PATHS ${PC_FFTW_LIBRARY_DIRS})
find_library(FFTWF_THREADS_LIBRARY
  NAMES fftw3f_threads
  PATHS ${PC_FFTW_LIBRARY_DIRS})

include(FindPackageHandleStandardArgs)

find_package_handle_standard_args(FFTW
  FOUND_VAR FFTW_FOUND
  REQUIRED_VARS
    FFTW_LIBRARY
    FFTWF_LIBRARY
    FFTW_INCLUDE_DIR
  VERSION_VAR FFTW_VERSION
)

if(FFTW_INCLUDE_DIR AND FFTW_LIBRARY)
  add_library(FFTW::fftw UNKNOWN IMPORTED)
  set_target_properties(FFTW::fftw PROPERTIES
    IMPORTED_LOCATION ${FFTW_LIBRARY}
    INTERFACE_INCLUDE_DIRECTORIES ${FFTW_INCLUDE_DIR})
endif()

if(FFTW_INCLUDE_DIR AND FFTWF_LIBRARY)
  add_library(FFTW::fftwf UNKNOWN IMPORTED)
  set_target_properties(FFTW::fftwf PROPERTIES
    IMPORTED_LOCATION ${FFTWF_LIBRARY}
    INTERFACE_INCLUDE_DIRECTORIES ${FFTW_INCLUDE_DIR})
endif()

if(FFTW_INCLUDE_DIR AND FFTW_THREADS_LIBRARY)
  add_library(FFTW::fftw_threads UNKNOWN IMPORTED)
  set_target_properties(FFTW::fftw_threads PROPERTIES
    IMPORTED_LOCATION ${FFTW_THREADS_LIBRARY}
    INTERFACE_INCLUDE_DIRECTORIES ${FFTW_INCLUDE_DIR})
endif()

if(FFTW_INCLUDE_DIR AND FFTWF_THREADS_LIBRARY)
  add_library(FFTW::fftwf_threads UNKNOWN IMPORTED)
  set_target_properties(FFTW::fftwf_threads PROPERTIES
    IMPORTED_LOCATION ${FFTWF_THREADS_LIBRARY}
    INTERFACE_INCLUDE_DIRECTORIES ${FFTW_INCLUDE_DIR})
endif()

mark_as_advanced(
  FFTW_INCLUDE_DIR
  FFTW_LIBRARY
  FFTWF_LIBRARY
  FFTW_THREADS_LIBRARY
  FFTWF_THREADS_LIBRARY )
